name: Build and release
on:
  workflow_call:
    inputs:
      next:
        default: false
        description: Publish the alpha version
        type: boolean
    secrets:
      NPM_TOKEN:
        required: true
permissions:
  contents: write
  packages: write
jobs:
  build-and-deploy-to-npmjs:
    name: Build and deploy to npmjs.com
    permissions:
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Stages the pushed branch
        uses: actions/checkout@v5
      - name: Setup the pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
      - name: Prepare the Node.js environment
        uses: actions/setup-node@v5
        with:
          cache: pnpm
          check-latest: true
          node-version-file: .node-version
      - env:
          HUSKY: 0
        name: Install the dependencies
        run: pnpm install --frozen-lockfile --prefer-offline
      - name: Build the project explicitly. The workaround is provisional because the publish command does not perform topological sorting.
        run: pnpm run build
      - env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        name: Setting the npmjs registry and the token
        run: |
          cat << EOF > "${HOME}/.npmrc"
          registry=https://registry.npmjs.org/
          @kurone-kito:registry=https://registry.npmjs.org/
          //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF
      - if: ${{ inputs.next != true }}
        name: Publish the packages
        run: pnpm run publish --no-git-check
      - if: ${{ inputs.next == true }}
        name: Publish the packages as the alpha version
        run: pnpm run publish:next --no-git-check
  build-and-deploy-to-github:
    name: Build and deploy to GitHub Packages
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Stages the pushed branch
        uses: actions/checkout@v5
      - name: Setup the pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
      - name: Prepare the Node.js environment
        uses: actions/setup-node@v5
        with:
          cache: pnpm
          check-latest: true
          node-version-file: .node-version
      - env:
          HUSKY: 0
        name: Install the dependencies
        run: pnpm install --frozen-lockfile --prefer-offline
      - name: Build the project explicitly. The workaround is provisional because the publish command does not perform topological sorting.
        run: pnpm run build
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        name: Setting the GitHub registry and the token
        run: |
          cat << EOF > "${HOME}/.npmrc"
          registry=https://npm.pkg.github.com/
          @kurone-kito:registry=https://npm.pkg.github.com/
          //npm.pkg.github.com/:_authToken=$GITHUB_TOKEN
          EOF
      - if: ${{ !inputs.next }}
        name: Publish the packages
        run: pnpm run publish --no-git-check
      - if: ${{ inputs.next }}
        name: Publish the packages as the alpha version
        run: pnpm run publish:next --no-git-check
  build-and-deploy-packages-to-release:
    if: ${{ github.event_name == 'release' }}
    name: Build and deploy the packages to the release
    permissions:
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Stages the pushed branch
        uses: actions/checkout@v5
      - name: Setup the pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
      - name: Prepare the Node.js environment
        uses: actions/setup-node@v5
        with:
          cache: pnpm
          check-latest: true
          node-version-file: .node-version
      - env:
          HUSKY: 0
        name: Install the dependencies
        run: pnpm install --frozen-lockfile --prefer-offline
      - if: ${{ inputs.next == true }}
        name: Check the whether the current version is prerelease
        run: pnpm run is:prerelease
      - if: ${{ inputs.next != true }}
        name: Check the whether the current version is not prerelease
        run: pnpm run is:release
      - name: Build the project explicitly. The workaround is provisional because the publish command does not perform topological sorting.
        run: pnpm run build
      - name: pack the packages
        run: pnpm --filter "!*builder-config" -r pack
      - name: Uploading assets to the release
        uses: softprops/action-gh-release@v2
        with:
          files: '*.tgz'
  build-and-deploy-sea-to-release:
    if: ${{ github.event_name == 'release' }}
    name: Build and deploy the SEA apps to the release
    permissions:
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Stages the pushed branch
        uses: actions/checkout@v5
      - name: Setup the pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
      - name: Prepare the Node.js environment
        uses: actions/setup-node@v5
        with:
          cache: pnpm
          check-latest: true
          node-version-file: .node-version
      - env:
          HUSKY: 0
        name: Install the dependencies
        run: pnpm install --frozen-lockfile --prefer-offline
      - name: Build the project explicitly. The workaround is provisional because the publish command does not perform topological sorting.
        run: pnpm run build:sea
      - name: Compress the SEA binaries
        run: |
          cd packages/example-cli/sea
          for bin in *; do
            zip -9 "${bin}.zip" "$bin"
          done
      - name: Uploading assets to the release
        uses: softprops/action-gh-release@v2
        with:
          files: 'packages/cli/sea/*.zip'
