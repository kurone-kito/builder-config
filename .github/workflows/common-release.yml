name: Build and release
on:
  workflow_call:
    inputs:
      next:
        default: false
        description: Publish the alpha version
        type: boolean
    secrets:
      NPM_TOKEN:
        required: true
permissions:
  contents: read
  packages: write
jobs:
  build:
    name: The build process
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Stages the pushed branch
        uses: actions/checkout@v5
      - name: Pre-prepare the Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
      - name: Install the latest corepack explicitly
        run: npm install --force -g corepack@latest
      - name: Enable the corepack
        run: corepack enable
      - name: Post-prepare the Node.js environment
        uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version-file: .node-version
      - env:
          HUSKY: 0
        name: Install the dependencies
        run: pnpm install --frozen-lockfile --prefer-offline
      - name: Build the project explicitly. The workaround is provisional because the publish command does not perform topological sorting.
        run: pnpm run build
      - env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        name: Setting the npmjs registry and the token
        run: |
          cat << EOF > "${HOME}/.npmrc"
          registry=https://registry.npmjs.org/
          @kurone-kito:registry=https://registry.npmjs.org/
          //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF
      - env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ inputs.next != true }}
        name: Publish the packages
        run: pnpm run publish --no-git-check
      - env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ inputs.next == true }}
        name: Publish the packages as the alpha version
        run: pnpm run publish:next --no-git-check
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        name: Setting the GitHub registry and the token
        run: |
          cat << EOF > "${HOME}/.npmrc"
          registry=https://npm.pkg.github.com/
          @kurone-kito:registry=https://npm.pkg.github.com/
          //npm.pkg.github.com/:_authToken=$GITHUB_TOKEN
          EOF
      - env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ !inputs.next }}
        name: Publish the packages
        run: pnpm run publish --no-git-check
      - env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ inputs.next }}
        name: Publish the packages as the alpha version
        run: pnpm run publish:next --no-git-check
      - if: ${{ github.event_name == 'release' }}
        name: pack the packages
        run: pnpm --filter "!*builder-config" -r pack
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ github.event.release.tag_name }}
        if: ${{ github.event_name == 'release' }}
        name: attach the packages to the release assets
        run: gh release upload "$TAG_NAME" ./*.tgz --clobber
      - if: ${{ github.event_name == 'release' }}
        name: build the SEA binaries
        run: pnpm run build:sea
      - if: ${{ github.event_name == 'release' }}
        name: Compress the SEA binaries
        run: |
          cd packages/cli/sea
          for bin in *; do
            zip -9 "${bin}.zip" "$bin"
          done
      - if: ${{ github.event_name == 'release' }}
        name: Uploading assets to the release
        uses: softprops/action-gh-release@v2
        with:
          files: packages/cli/sea/*.zip
